#!/usr/bin/env bash
##
## Copyright 2015-2025 Real Logic Limited.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## https://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

set -euxo pipefail

required_vars=(
  "SSH_CLIENT_USER"
  "SSH_CLIENT_KEY_FILE"
  "SSH_SERVER_USER"
  "SSH_SERVER_KEY_FILE"
  "SSH_CLIENT_NODE"
  "SSH_SERVER_NODE")

for var in "${required_vars[@]}"; do
  if [[ -z "${!var+''}" ]]
  then
    echo "env var '${var}' must be set"
    required_var_missing=true
  fi
done

if [[ -v required_var_missing && -n "${required_var_missing}" ]];
then
  exit 1
fi

sshConnectionAttempts=${SSH_CONNECTION_ATTEMPTS:-10}
sshConnectTimeout=${SSH_CONNECT_TIMEOUT:-30}
sshServerAliveInterval=${SSH_SERVER_ALIVE_INTERVAL:-600}
connectionTimeout="${CONNECTION_TIMEOUT:-60s}"

runs=${RUNS:-3}
iterations=${ITERATIONS:-60}
warmupIterations=${WARMUP_ITERATIONS:-30}
warmupMessageRate="${WARMUP_MESSAGE_RATE:-25K}"

messageRates=("501K" "301K" "101K")
if [[ -v MESSAGE_RATE && -n ${MESSAGE_RATE} ]];
then
  IFS=',';
  read -ra messageRates <<< "${MESSAGE_RATE}"
  unset IFS;
fi

messageLengths=(32 288 1344)
if [[ -v MESSAGE_LENGTH && -n ${MESSAGE_LENGTH} ]];
then
  IFS=',';
  read -ra messageLengths <<< "${MESSAGE_LENGTH}"
  unset IFS;
fi

if [[ "${#messageRates[@]}" != "${#messageLengths[@]}" ]];
then
  echo "MESSAGE_RATE and MESSAGE_LENGTH number of elements do not match: ${#messageRates[@]} vs ${#messageLengths[@]}"
  exit 1
fi

burstSizes=(1)
if [[ -v BURST_SIZE && -n ${BURST_SIZE} ]];
then
  IFS=',';
  read -ra burstSizes <<< "${BURST_SIZE}"
  unset IFS;
fi

function run_benchmarks()
{
  local client_command="${1}"
  local server_start_command="${2}"
  local server_stop_command="${3}"
  local client_output_dir="${4}"
  local server_output_dir="${5}"
  local client_jvm_opts="${6}"
  local server_jvm_opts="${7}"

  for rateIndex in "${!messageRates[@]}"
  do
    messageRate=${messageRates[rateIndex]}
    messageLength=${messageLengths[rateIndex]}
    for burstSize in "${burstSizes[@]}"
    do
      for (( i=0; i<runs; i++ ))
      do
        local run=$((i + 1))
        local dir_suffix="_length=${messageLength}_rate=${messageRate}/run-${run}"
        local client_results_dir="${client_output_dir}${dir_suffix}"
        local server_results_dir="${server_output_dir}${dir_suffix}"
        echo -e '\n### Benchmark run #'${run}' ...\n'

        local jvm_opts="export JVM_OPTS=\""
        jvm_opts+="${server_jvm_opts} "
        jvm_opts+="-Dio.aeron.benchmarks.output.directory=${server_results_dir}\""

        echo -e "\nStarting server..."
        execute_remote_command "${SSH_SERVER_USER}" "${SSH_SERVER_KEY_FILE}" "${SSH_SERVER_NODE}" "(${jvm_opts} && ${server_start_command} &) > /tmp/benchmarks-server.log 2>&1; true; exit"

        jvm_opts="export JVM_OPTS=\""
        jvm_opts+="${client_jvm_opts} "
        jvm_opts+="-Dio.aeron.benchmarks.track.history=${TRACK_HISTORY:-false} "
        jvm_opts+="-Dio.aeron.benchmarks.report.progress=${REPORT_PROGRESS:-false} "
        jvm_opts+="-Dio.aeron.benchmarks.aeron.connection.timeout=${connectionTimeout} "
        jvm_opts+="-Dio.aeron.benchmarks.warmup.iterations=${warmupIterations} "
        jvm_opts+="-Dio.aeron.benchmarks.warmup.message.rate=${warmupMessageRate} "
        jvm_opts+="-Dio.aeron.benchmarks.iterations=${iterations} "
        jvm_opts+="-Dio.aeron.benchmarks.message.rate=${messageRate# } "
        jvm_opts+="-Dio.aeron.benchmarks.batch.size=${burstSize# } "
        jvm_opts+="-Dio.aeron.benchmarks.message.length=${messageLength# } "
        jvm_opts+="-Dio.aeron.benchmarks.output.directory=${client_results_dir}\""

        echo -e "\nStarting client..."
        execute_remote_command \
            "${SSH_CLIENT_USER}" \
            "${SSH_CLIENT_KEY_FILE}" \
            "${SSH_CLIENT_NODE}" \
            "${jvm_opts} && ${client_command}; \
            cp /dev/shm/*-gc.log \"${client_results_dir}/logs\" 2>/dev/null || true; \
            cp /dev/shm/*-crash.log \"${client_results_dir}/logs\" 2>/dev/null || true; \
            cp /dev/shm/*.jfr \"${client_results_dir}/logs\" 2>/dev/null || true; \
            rm /dev/shm/*-gc.log 2>/dev/null || true; \
            rm /dev/shm/*-crash.log 2>/dev/null || true; \
            rm /dev/shm/*.jfr 2>/dev/null || true; \
            true; exit"

        echo -e "\nStopping server..."
        execute_remote_command \
            "${SSH_SERVER_USER}" \
            "${SSH_SERVER_KEY_FILE}" \
            "${SSH_SERVER_NODE}" \
            "${server_stop_command}; \
            cp /dev/shm/*-gc.log \"${server_results_dir}/logs\" 2>/dev/null || true; \
            cp /dev/shm/*-crash.log \"${server_results_dir}/logs\" 2>/dev/null || true; \
            cp /dev/shm/*.jfr \"${server_results_dir}/logs\" 2>/dev/null || true; \
            rm /dev/shm/*-gc.log 2>/dev/null || true; \
            rm /dev/shm/*-crash.log 2>/dev/null || true; \
            rm /dev/shm/*.jfr 2>/dev/null || true; \
            cp /tmp/benchmarks-server.log \"${server_results_dir}/logs\" 2>/dev/null || true; \
            true; exit"
      done
    done
  done
}

function collect_environment_info()
{
  local sshUser=${1}
  local sshKeyFile=${2}
  local server=${3}
  local scripts_path="${4}"
  local output_path="${5}"
  local java_home="${6}"

  execute_remote_command "${sshUser}" "${sshKeyFile}" "${server}" "${scripts_path}/collect-environment-info $output_path $java_home; true && exit"
}

function download_results()
{
  local sshUser=${1}
  local sshKeyFile=${2}
  local server=${3}
  local results_dir="${4}"
  local dest_dir="${5}"
  local archive="/tmp/${6}.tar.gz"

  execute_remote_command "${sshUser}" "${sshKeyFile}" "${server}" "cd \"${results_dir}\" && tar -czf \"${archive}\" . && exit"

  mkdir -p "${dest_dir}"

  scp -i "${sshKeyFile}" \
   -o ConnectionAttempts="${sshConnectionAttempts}" \
   -o ConnectTimeout="${sshConnectTimeout}" \
   -o ServerAliveInterval="${sshServerAliveInterval}" \
   "${sshUser}"@"${server}":"${archive}" "${dest_dir}"
}

function await_process_start()
{
  local pid_cmd=${1}

  # note: this multiline string is converted to single line string at the end of this function
  local script="
    echo 'Await process start';
    count=0;
    pid=${pid_cmd};
    while [ -z \"\${pid}\" ] && [ \${count} -lt 120 ]; do
      sleep 0.5;
      pid=${pid_cmd};
      count=\$((count + 1));
    done;
    if [ -z \"\${pid}\" ]; then
       echo 'Timeout: process not found after 60 seconds.';
       exit 1;
    fi;
    echo \"pid='\${pid}'\"
  "
  echo "${script}" | tr '\n' ' '
}

function find_java_process()
{
  local class_name=${1}
  echo "\$(pgrep -l -f '${class_name}' | awk '/java/{print \$1}')"
}

function await_java_process_start()
{
  local class_name=${1}
  await_process_start "$(find_java_process "${class_name}")"
}

function pin_thread()
{
  local pid=${1}
  local thread_name=${2}
  local core=${3}
  local tid_cmd="\$(ps Ho tid,comm -p ${pid} | awk '/${thread_name}/{print \$1}' | head -1)"

  # note: this multiline string is converted to single line string at the end of this function
  local script="
    echo 'Pinning thread: ${thread_name}';
    count=0;
    tid=${tid_cmd};
    while [ -z \"\${tid}\" ] && [ \${count} -lt 600 ]; do
      sleep 0.1;
      tid=${tid_cmd};
      count=\$((count + 1));
    done;
    if [ -z \"\${tid}\" ]; then
      echo 'Timeout: thread ${thread_name} not found after 60 seconds.';
      exit 1;
    fi;
    echo \"tid_${thread_name}='\${tid}'\";
    taskset -p -c ${core} \${tid}
  "

  echo "${script}" | tr '\n' ' '
}

function kill_java_process()
{
  local class_name=${1}
  echo "kill -9 $(find_java_process "${class_name}")"
}

function stop_java_process()
{
  local class_name=${1}
  echo "kill $(find_java_process "${class_name}")"
}

function execute_remote_command()
{
  local sshUser=${1}
  local sshKeyFile=${2}
  local server=${3}
  local command=${4}
  ssh -i "${sshKeyFile}" \
   -o StrictHostKeyChecking=no \
   -o ConnectionAttempts="${sshConnectionAttempts}" \
   -o ConnectTimeout="${sshConnectTimeout}" \
   -o ServerAliveInterval="${sshServerAliveInterval}" \
   "${sshUser}"@"${server}" \
   "${command}"
}
