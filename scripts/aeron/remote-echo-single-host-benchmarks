#!/usr/bin/env bash
##
## Copyright 2015-2025 Real Logic Limited.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## https://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

set -euxo pipefail

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

export SSH_SERVER_NODE=
export SSH_SERVER_USER=
export SSH_SERVER_KEY_FILE=

source "${DIR}/remote-benchmarks-helper"

required_vars=(
  "BENCHMARKS_PATH"
  "JAVA_HOME"
  "DRIVER_CONDUCTOR_CPU_CORE"
  "DRIVER_SENDER_CPU_CORE"
  "DRIVER_RECEIVER_CPU_CORE"
  "DRIVER_CPU_NODE"
  "NON_ISOLATED_CPU_CORES"
  "SOURCE_CHANNEL"
  "DESTINATION_CHANNEL"
  "CLIENT_LOAD_TEST_RIG_MAIN_CPU_CORE"
  "CLIENT_CPU_NODE"
  "SERVER_ECHO_CPU_CORE"
  "SERVER_CPU_NODE")

for var in "${required_vars[@]}"; do
  if [[ -z "${!var+''}" ]]
  then
    echo "env var '${var}' must be set"
    required_var_missing=true
  fi
done

if [[ -v required_var_missing && -n "${required_var_missing}" ]]
then
  exit 1
fi

ef_vi_rxq_size=${AERON_EF_VI_RXQ_SIZE:-2048} # ef_vi receive queue size
ef_vi_txq_size=${AERON_EF_VI_TXQ_SIZE:-2048} # ef_vi send queue size
so_sndbuf="${AERON_SOCKET_SO_SNDBUF:-2m}"
so_rcvbuf="${AERON_SOCKET_SO_RCVBUF:-2m}"
rcv_initial_window="${AERON_RCV_INITIAL_WINDOW_LENGTH:-2m}"
max_messages_per_send="${AERON_NETWORK_PUBLICATION_MAX_MESSAGES_PER_SEND:-2}"
dpdk_config_overrides=""
if [[ -v AERON_DPDK_MTU && -n ${AERON_DPDK_MTU} ]];
then
  dpdk_config_overrides="AERON_DPDK_MTU=${AERON_DPDK_MTU}"
fi
if [[ -v AERON_DPDK_TX_QUEUE_SIZE && -n ${AERON_DPDK_TX_QUEUE_SIZE} ]];
then
  dpdk_config_overrides+=" AERON_DPDK_TX_QUEUE_SIZE=${AERON_DPDK_TX_QUEUE_SIZE}"
fi
if [[ -v AERON_DPDK_RX_QUEUE_SIZE && -n ${AERON_DPDK_RX_QUEUE_SIZE} ]];
then
  dpdk_config_overrides+=" AERON_DPDK_RX_QUEUE_SIZE=${AERON_DPDK_RX_QUEUE_SIZE}"
fi
if [[ -v AERON_DPDK_PORT_ID && -n ${AERON_DPDK_PORT_ID} ]];
then
  dpdk_config_overrides+=" AERON_DPDK_PORT_ID=${AERON_DPDK_PORT_ID}"
fi

context=""
mtu_list=(1408)
onload="onload --profile=latency "
drivers=()
declare -A supported_drivers
supported_drivers=(['java']='' ['java-onload']='' ['c']='' ['c-onload']='' ['c-ef-vi']='' ['c-dpdk']='' ['c-ats']='' ['c-ats-onload']='' ['c-ats-ef-vi']='' ['c-ats-dpdk']='')

download_dir="${DIR}/.."

while [[ $# -gt 0 ]]
do
  case "${1}" in
  --context)
    context="${2}"
    shift
    shift
    ;;
  --onload)
    onload="${2}"
    shift
    shift
    ;;
  --mtu)
    IFS=',';
    read -ra mtu_list <<< "${2}"
    unset IFS;
    shift
    shift
    ;;
  --drivers)
    IFS=',';
    read -ra drivers <<< "${2}"
    unset IFS;
    shift
    shift
    ;;
  --download-dir)
    download_dir="${2}"
    shift
    shift
    ;;
  -h|--help)
    echo "${0} --drivers \"media-drivers-list-csv\" \
    [--context \"\$context\"] [--onload \"\$onload_command\"] [--mtu \"\$mtu-csv\"] \
    [--download-dir \"\$download_dir\"]
          the support media drivers are: ${!supported_drivers[*]}"
    exit
    ;;
  *)
    echo "Invalid parameter '${1}'. Use --help to get a list of supported parameters."
    exit 1
    ;;
  esac
done

connectionTimeout="${CONNECTION_TIMEOUT:-60s}"

runs=${RUNS:-3}
iterations=${ITERATIONS:-60}
warmupIterations=${WARMUP_ITERATIONS:-30}
warmupMessageRate="${WARMUP_MESSAGE_RATE:-25K}"

messageRates=("501K" "301K" "101K")
if [[ -v MESSAGE_RATE && -n ${MESSAGE_RATE} ]];
then
  IFS=',';
  read -ra messageRates <<< "${MESSAGE_RATE}"
  unset IFS;
fi

messageLengths=(32 288 1344)
if [[ -v MESSAGE_LENGTH && -n ${MESSAGE_LENGTH} ]];
then
  IFS=',';
  read -ra messageLengths <<< "${MESSAGE_LENGTH}"
  unset IFS;
fi

if [[ "${#messageRates[@]}" != "${#messageLengths[@]}" ]];
then
  echo "MESSAGE_RATE and MESSAGE_LENGTH number of elements do not match: ${#messageRates[@]} vs ${#messageLengths[@]}"
  exit 1
fi

burstSizes=(1)
if [[ -v BURST_SIZE && -n ${BURST_SIZE} ]];
then
  IFS=',';
  read -ra burstSizes <<< "${BURST_SIZE}"
  unset IFS;
fi

function start_node()
{
  local node_id=${1}
  local server_class_name=${2}
  local server_driver=${3}
  local output_dir=${4}
  local benchmarks_path_var=NODE${node_id}_BENCHMARKS_PATH
  local java_home_var=NODE${node_id}_JAVA_HOME
  local cpu_node_var=NODE${node_id}_CPU_NODE
  local non_isolated_cpu_cores_var=NODE${node_id}_NON_ISOLATED_CPU_CORES
  local echo_cpu_var=NODE${node_id}_ECHO_CPU_CORE
  local extra_properties_var=NODE${node_id}_EXTRA_PROPERTIES
  local destination_channel_var=NODE${node_id}_DESTINATION_CHANNEL
  local source_channel_var=NODE${node_id}_SOURCE_CHANNEL
  echo "
    export JAVA_HOME=\"${!java_home_var}\" PROCESS_FILE_NAME=\"echo-node-media-driver-${node_id}\" \
    ; $(kill_java_process "${server_class_name}") \
    ; ${server_driver} \
    && export JVM_OPTS=\"\
    -Dio.aeron.benchmarks.aeron.connection.timeout=${connectionTimeout} \
    -Dio.aeron.benchmarks.output.directory=${output_dir} \
    -Dio.aeron.benchmarks.aeron.destination.channel=${!destination_channel_var} \
    -Dio.aeron.benchmarks.aeron.source.channel=${!source_channel_var} \
    -Dio.aeron.benchmarks.aeron.receiver.index=${node_id} \
    ${!extra_properties_var:-}\" PROCESS_FILE_NAME=\"echo-node-${node_id}\" \
    && numactl --membind=${!cpu_node_var} --cpunodebind=${!cpu_node_var} --physcpubind=\"${!non_isolated_cpu_cores_var}\" ${!benchmarks_path_var}/scripts/aeron/echo-server & \
    $(await_java_process_start "${server_class_name}") \
    ; $(pin_thread "\${pid}" "echo-${node_id}" "${!echo_cpu_var}") \
    && tail --pid=\$! -f /dev/null"
}

scripts_path="benchmarks_path_var/scripts/aeron"

driver_properties="echo -e \"\
aeron.dir=${AERON_DIR:-/dev/shm/aeron}\n\
aeron.file.page.size=${AERON_FILE_PAGE_SIZE:-4k}\n\
aeron.term.buffer.sparse.file=${AERON_TERM_BUFFER_SPARSE_FILE:-true}\n\
aeron.pre.touch.mapped.memory=${AERON_PRE_TOUCH_MAPPED_MEMORY:-false}\n\
aeron.conductor.cpu.affinity=driver_conductor_cpu_core_var\n\
aeron.sender.cpu.affinity=driver_sender_cpu_core_var\n\
aeron.receiver.cpu.affinity=driver_receiver_cpu_core_var\n\
aeron.mtu.length=driver_mtu_var\n\
aeron.ipc.mtu.length=driver_mtu_var\n\
aeron.socket.so_sndbuf=${so_sndbuf}\n\
aeron.socket.so_rcvbuf=${so_rcvbuf}\n\
aeron.rcv.initial.window.length=${rcv_initial_window}\n\
aeron.network.publication.max.messages.per.send=${max_messages_per_send}\n\
aeron.receiver.io.vector.capacity=${max_messages_per_send}\n\
aeron.sender.io.vector.capacity=${max_messages_per_send}\n\
\" > ${scripts_path}/benchmark.properties"

supported_drivers['java']="${driver_properties}; \
      $(start_media_driver "${scripts_path}/media-driver" "" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var" "driver_async_executor_cpu_core_var")"

supported_drivers['java-onload']="${driver_properties}; \
      export EF_NO_FAIL=0 EF_RXQ_SIZE=${ef_vi_rxq_size} EF_TXQ_SIZE=${ef_vi_txq_size} \
      && $(start_media_driver "${scripts_path}/media-driver" "${onload}" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var" "driver_async_executor_cpu_core_var")"

supported_drivers['c']="${driver_properties}; \
      $(start_media_driver "${scripts_path}/c-media-driver" "" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var" "driver_async_executor_cpu_core_var")"

supported_drivers['c-onload']="${driver_properties}; \
      export EF_NO_FAIL=0 EF_RXQ_SIZE=${ef_vi_rxq_size} EF_TXQ_SIZE=${ef_vi_txq_size} \
      && $(start_media_driver "${scripts_path}/c-media-driver" "${onload}" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var" "driver_async_executor_cpu_core_var")"

supported_drivers['c-ef-vi']="${driver_properties}; \
      export EF_VI_RXQ_SIZE=${ef_vi_rxq_size} EF_VI_TXQ_SIZE=${ef_vi_txq_size} \
      AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_ef_vi.so\" \
      AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA=\"aeron_udp_channel_transport_ef_vi_bindings\" \
      AERON_EF_VI_CONF_FILE=\"${scripts_path}/ef_vi.conf\" \
      && $(start_media_driver "${scripts_path}/c-media-driver" "" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var" "driver_async_executor_cpu_core_var")"

supported_drivers['c-dpdk']="${driver_properties}; \
      export AERON_DPDK_GATEWAY_IPV4_ADDRESS=driver_aeron_dpdk_gateway_ipv4_address_var \
      AERON_DPDK_LOCAL_IPV4_ADDRESS=driver_aeron_dpdk_local_ipv4_address_var \
      ${dpdk_config_overrides} \
      && $(start_media_driver "${scripts_path}/c-aeronmd-dpdk" "" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var" "driver_async_executor_cpu_core_var")"

supported_drivers['c-ats']="${driver_properties}; \
        export AERON_TRANSPORT_SECURITY_CONF_DIR=\"${scripts_path}\" \
        AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
        AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_transport_security.so\" \
        && $(start_media_driver "${scripts_path}/c-media-driver" "" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var" "driver_async_executor_cpu_core_var")"

supported_drivers['c-ats-onload']="${driver_properties}; \
        export EF_NO_FAIL=0 EF_RXQ_SIZE=${ef_vi_rxq_size} EF_TXQ_SIZE=${ef_vi_txq_size} \
        AERON_TRANSPORT_SECURITY_CONF_DIR=\"${scripts_path}\" \
        AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
        AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_transport_security.so\" \
        && $(start_media_driver "${scripts_path}/c-media-driver" "${onload}" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var" "driver_async_executor_cpu_core_var")"

supported_drivers['c-ats-ef-vi']="${driver_properties}; \
        export EF_VI_RXQ_SIZE=${ef_vi_rxq_size} EF_VI_TXQ_SIZE=${ef_vi_txq_size} \
        AERON_TRANSPORT_SECURITY_CONF_DIR=\"${scripts_path}\" \
        AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
        AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_transport_security.so\",\"${scripts_path}/libaeron_ef_vi.so\" \
        AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA=\"aeron_udp_channel_transport_ef_vi_bindings\" \
        AERON_EF_VI_CONF_FILE=\"${scripts_path}/ef_vi.conf\" \
        && $(start_media_driver "${scripts_path}/c-media-driver" "" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var" "driver_async_executor_cpu_core_var")"

supported_drivers['c-ats-dpdk']="${driver_properties}; \
        export AERON_DPDK_GATEWAY_IPV4_ADDRESS=driver_aeron_dpdk_gateway_ipv4_address_var \
        AERON_DPDK_LOCAL_IPV4_ADDRESS=driver_aeron_dpdk_local_ipv4_address_var \
        ${dpdk_config_overrides} \
        AERON_TRANSPORT_SECURITY_CONF_DIR=\"${scripts_path}\" \
        AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
        AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        && $(start_media_driver "${scripts_path}/c-aeronmd-dpdk" "" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var" "driver_async_executor_cpu_core_var")"

for index in "${!drivers[@]}"
do
  driver="${drivers[index]# }"
  if [ -z "${supported_drivers[$driver]+x}" ]
  then
    echo "Unknown driver '${driver}': (${drivers[*]})"
    exit 1
  fi
done

test_type="aeron-echo-single-host"
test_dir="${test_type}-$(date '+%Y-%m-%d-%H-%M-%S')"
output_dir_prefix="scripts/results/${test_dir}"
for md in "${drivers[@]}"
do
  for mtu in "${mtu_list[@]}"
  do
    test="${test_type}_${md}_${context}_mtu=${mtu}"
    echo -e "\n Testing scenario: '${test}'\n"

    media_driver="${supported_drivers[${md}]//driver_mtu_var/${mtu}}"
    media_driver="${media_driver//benchmarks_path_var/${BENCHMARKS_PATH}}"
    media_driver="${media_driver//driver_cpu_node_var/${DRIVER_CPU_NODE}}"
    media_driver="${media_driver//driver_non_isolated_cpu_cores_var/${NON_ISOLATED_CPU_CORES}}"
    media_driver="${media_driver//driver_conductor_cpu_core_var/${DRIVER_CONDUCTOR_CPU_CORE}}"
    media_driver="${media_driver//driver_sender_cpu_core_var/${DRIVER_SENDER_CPU_CORE}}"
    media_driver="${media_driver//driver_receiver_cpu_core_var/${DRIVER_RECEIVER_CPU_CORE}}"
    media_driver="${media_driver//driver_aeron_dpdk_gateway_ipv4_address_var/${AERON_DPDK_GATEWAY_IPV4_ADDRESS}}"
    media_driver="${media_driver//driver_aeron_dpdk_local_ipv4_address_var/${AERON_DPDK_LOCAL_IPV4_ADDRESS}}"

    client_class_name="io.aeron.benchmarks.LoadTestRig"
    server_class_name="io.aeron.benchmarks.aeron.EchoNode"

    for rateIndex in "${!messageRates[@]}"
    do
      messageRate=${messageRates[rateIndex]}
      messageLength=${messageLengths[rateIndex]}
      for burstSize in "${burstSizes[@]}"
      do
        for (( i=0; i<runs; i++ ))
        do
          run=$((i + 1))
          echo -e "\n\033[1;32m### [$(date +"%Y-%m-%d %H:%M:%S")] Benchmark run #${run} ...\033[0m\n"

          output_dir="${output_dir_prefix}/${test}_length=${messageLength}_rate=${messageRate}/run-${run}"

          benchmark_command="export JVM_OPTS=\"\
          -Dio.aeron.benchmarks.aeron.connection.timeout=${connectionTimeout}\
          -Dio.aeron.benchmarks.warmup.iterations=${warmupIterations}\
          -Dio.aeron.benchmarks.warmup.message.rate=${warmupMessageRate}\
          -Dio.aeron.benchmarks.iterations=${iterations}\
          -Dio.aeron.benchmarks.message.rate=${messageRate# }\
          -Dio.aeron.benchmarks.batch.size=${burstSize# }\
          -Dio.aeron.benchmarks.message.length=${messageLength# }\
          -Dio.aeron.benchmarks.output.file=${test}\
          -Dio.aeron.benchmarks.output.time.unit=${OUTPUT_TIME_UNIT:-MICROSECONDS}\
          -Dio.aeron.benchmarks.track.history=${TRACK_HISTORY:-false}\
          -Dio.aeron.benchmarks.report.progress=${REPORT_PROGRESS:-false}\
          -Dio.aeron.benchmarks.output.directory=${BENCHMARKS_PATH}/${output_dir}\
          -Dio.aeron.benchmarks.aeron.destination.channel=${DESTINATION_CHANNEL}\
          -Dio.aeron.benchmarks.aeron.source.channel=${SOURCE_CHANNEL}\"\
          && export JAVA_HOME=\"${JAVA_HOME}\"\
          ; $(kill_java_process "${client_class_name}")\
          ; $(kill_java_process "${server_class_name}")\
          ; ${media_driver}\
          && numactl --membind=${SERVER_CPU_NODE} --cpunodebind=${SERVER_CPU_NODE} --physcpubind=\"${NON_ISOLATED_CPU_CORES}\" ${BENCHMARKS_PATH}/scripts/aeron/echo-server & \
          $(await_java_process_start "${server_class_name}"); echo_pid=\${pid}; echo \"echo_pid=\${echo_pid}\" \
          && numactl --membind=${CLIENT_CPU_NODE} --cpunodebind=${CLIENT_CPU_NODE} --physcpubind=\"${NON_ISOLATED_CPU_CORES}\" ${BENCHMARKS_PATH}/scripts/aeron/echo-client & \
          $(await_java_process_start "${client_class_name}"); load_test_rig_pid=\${pid}; echo \"load_test_rig_pid=\${load_test_rig_pid}\" \
          && $(pin_thread "\${echo_pid}" "echo-0" "${SERVER_ECHO_CPU_CORE}"); $(pin_thread "\${load_test_rig_pid}" "load-test-rig" "${CLIENT_LOAD_TEST_RIG_MAIN_CPU_CORE}") \
          && tail --pid=\$! -f /dev/null; kill -9 \${echo_pid}; kill -9 \${media_driver_pid}; wait"

          echo -e "\nRunning benchmark..."
          execute_remote_command "${SSH_CLIENT_USER}" "${SSH_CLIENT_KEY_FILE}" "${SSH_CLIENT_NODE}" "${benchmark_command}; cp /dev/shm/*-gc.log \"${BENCHMARKS_PATH}/${output_dir}/logs\" 2>/dev/null || true; cp /dev/shm/*-crash.log \"${BENCHMARKS_PATH}/${output_dir}/logs\" 2>/dev/null || true; cp /dev/shm/*.jfr \"${BENCHMARKS_PATH}/${output_dir}/logs\" 2>/dev/null || true; rm /dev/shm/*-gc.log 2>/dev/null || true; rm /dev/shm/*-crash.log 2>/dev/null || true; rm /dev/shm/*.jfr 2>/dev/null || true; true; exit"
        done
      done
    done
  done
done

collect_environment_info "${SSH_CLIENT_USER}" "${SSH_CLIENT_KEY_FILE}" "${SSH_CLIENT_NODE}" "${BENCHMARKS_PATH}/scripts" "${BENCHMARKS_PATH}/${output_dir_prefix}" "${JAVA_HOME}"
download_results "${SSH_CLIENT_USER}" "${SSH_CLIENT_KEY_FILE}" "${SSH_CLIENT_NODE}" "${BENCHMARKS_PATH}/${output_dir_prefix}" "${download_dir}" "${test_dir}"
